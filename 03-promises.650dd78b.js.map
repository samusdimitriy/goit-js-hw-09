{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAoCpC,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IA3CPL,EAAKa,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAEN,IAAgCC,EAAAF,EAAMG,OAAOC,SAArCC,EAAwBH,EAAxBX,MAAOe,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACjBC,EAAaC,OAAOJ,EAAMK,OACxBC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAElC,GAAIF,EAAa,GAAKG,EAAY,GAAKC,GAAe,EACpDC,EAAA7B,GAAS8B,OAAOC,QACd,yDAFJ,CAME,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAaI,IAChC3B,EAAc2B,EAAGR,GACdS,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,M,OACjBsB,EAAA7B,GAAS8B,OAAOK,QACd,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAGjD8B,OAAM,SAAAH,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,M,OAClBsB,EAAA7B,GAAS8B,OAAOC,QACd,sBAAqCK,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAIjDiB,GAAcG,EAIlBzB,EAAKoC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const { delay, step, amount } = event.target.elements;\n  let delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  if (delayValue < 0 || stepValue < 0 || amountValue <= 0) {\n    Notiflix.Notify.failure(\n      'Invalid input values. Please check and try again.'\n    );\n    return;\n  } else {\n    for (let i = 1; i <= amountValue; i++) {\n      createPromise(i, delayValue)\n        .then(({ position, delay }) =>\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          )\n        )\n        .catch(({ position, delay }) =>\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          )\n        );\n\n      delayValue += stepValue;\n    }\n  }\n\n  form.reset();\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","_elements","target","elements","delay1","step","amount","delayValue","Number","value","stepValue","amountValue","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch","reset"],"version":3,"file":"03-promises.650dd78b.js.map"}